---------------- com.sample.app.K ----------------
package com.sample.app

import com.jibru.kostra.AssetResourceKey
import com.jibru.kostra.DrawableResourceKey
import com.jibru.kostra.PluralResourceKey
import com.jibru.kostra.StringResourceKey

public object K {
  public object audio {
    public val sound: AssetResourceKey = AssetResourceKey("sound")
  }

  public object drawable {
    public val image: DrawableResourceKey = DrawableResourceKey("image")
  }

  public object plural {
    public val dog: PluralResourceKey = PluralResourceKey("dog")
  }

  public object string {
    public val item1: StringResourceKey = StringResourceKey("item1")

    public val item2: StringResourceKey = StringResourceKey("item2")
  }
}

---------------- com.sample.app.SupportResources ----------------
package com.sample.app

import com.jibru.kostra.`internal`.Dpi
import com.jibru.kostra.`internal`.Locale
import com.jibru.kostra.`internal`.Qualifiers

internal object KQualifiers {
  public val cs: Qualifiers = Qualifiers(locale = Locale("cs", null), dpi = Dpi.Undefined, others =
      setOf())

  public val de: Qualifiers = Qualifiers(locale = Locale("de", null), dpi = Dpi.Undefined, others =
      setOf())

  public val de_1325600: Qualifiers = Qualifiers(locale = Locale("de", null), dpi = Dpi.Undefined,
      others = setOf("fun",))

  public val en: Qualifiers = Qualifiers(locale = Locale("en", null), dpi = Dpi.Undefined, others =
      setOf())

  public val en_xxhdpi: Qualifiers = Qualifiers(locale = Locale("en", null), dpi = Dpi.XXHDPI,
      others = setOf())

  public val engb: Qualifiers = Qualifiers(locale = Locale("en", "gb"), dpi = Dpi.Undefined, others
      = setOf())
}

---------------- com.sample.app.Resources ----------------
package com.sample.app

import com.jibru.kostra.`internal`.AppResources
import com.jibru.kostra.`internal`.KostraResourceHider

public val Resources: AppResources = AppResources(
  binary = with(KostraResourceHider) { binary },
  drawable = with(KostraResourceHider) { drawable },
  string = with(KostraResourceHider) { string },
  plural = with(KostraResourceHider) { plural },
)


---------------- com.sample.app.Binary ----------------
package com.sample.app

import com.jibru.kostra.AssetResourceKey
import com.jibru.kostra.ResourceContainer
import com.jibru.kostra.`internal`.KostraResourceHider
import com.jibru.kostra.`internal`.Qualifiers
import com.jibru.kostra.`internal`.ResourceItem
import kotlin.collections.Map

public val binary: Map<AssetResourceKey, ResourceContainer> = buildMap(1) {
  put(K.audio.sound, ResourceContainer.Value(key = K.audio.sound, 
    values = listOf(
      ResourceItem(K.audio.sound, "audio/sound.mp3",  Qualifiers.Undefined),
      ResourceItem(K.audio.sound, "audio-cs/sound.mp4",  KQualifiers.cs),
      ResourceItem(K.audio.sound, "audio-de-fun/sound.mp3",  KQualifiers.de_1325600),
      ResourceItem(K.audio.sound, "audio-en-rGB/sound.mp3",  KQualifiers.engb),
  )))
}


public fun KostraResourceHider.binary(): Map<AssetResourceKey, ResourceContainer> = binary

---------------- com.sample.app.Drawable ----------------
package com.sample.app

import com.jibru.kostra.DrawableResourceKey
import com.jibru.kostra.ResourceContainer
import com.jibru.kostra.`internal`.KostraResourceHider
import com.jibru.kostra.`internal`.Qualifiers
import com.jibru.kostra.`internal`.ResourceItem
import kotlin.collections.Map

public val drawable: Map<DrawableResourceKey, ResourceContainer> = buildMap(1) {
  put(K.drawable.image, ResourceContainer.Value(key = K.drawable.image, 
    values = listOf(
      ResourceItem(K.drawable.image, "drawable/image.png",  Qualifiers.Undefined),
      ResourceItem(K.drawable.image, "drawable-en-xxhdpi/image.png",  KQualifiers.en_xxhdpi),
  )))
}


public fun KostraResourceHider.drawable(): Map<DrawableResourceKey, ResourceContainer> = drawable

---------------- com.sample.app.String ----------------
package com.sample.app

import com.jibru.kostra.ResourceContainer
import com.jibru.kostra.StringResourceKey
import com.jibru.kostra.`internal`.KostraResourceHider
import com.jibru.kostra.`internal`.Qualifiers
import com.jibru.kostra.`internal`.ResourceItem
import kotlin.collections.Map

public val string: Map<StringResourceKey, ResourceContainer> = buildMap(2) {
  put(K.string.item1, ResourceContainer.Value(key = K.string.item1, 
    values = listOf(
      ResourceItem(K.string.item1, "src1Item1",  Qualifiers.Undefined),
      ResourceItem(K.string.item1, "src2Item1De",  KQualifiers.de),
      ResourceItem(K.string.item1, "src1Item1En",  KQualifiers.en),
  )))
  put(K.string.item2, ResourceContainer.Value(key = K.string.item2, 
    values = listOf(
      ResourceItem(K.string.item2, "src2Item2",  Qualifiers.Undefined),
      ResourceItem(K.string.item2, "src2Item2De",  KQualifiers.de),
      ResourceItem(K.string.item2, "src1Item2En",  KQualifiers.en),
  )))
}


public fun KostraResourceHider.string(): Map<StringResourceKey, ResourceContainer> = string

---------------- com.sample.app.Plural ----------------
package com.sample.app

import com.jibru.kostra.PluralResourceKey
import com.jibru.kostra.ResourceContainer
import com.jibru.kostra.`internal`.KostraResourceHider
import com.jibru.kostra.`internal`.Qualifiers
import com.jibru.kostra.`internal`.ResourceItem
import kotlin.collections.Map

public val plural: Map<PluralResourceKey, ResourceContainer> = buildMap(1) {
  put(K.plural.dog, ResourceContainer.Value(key = K.plural.dog, 
    values = listOf(
      ResourceItem(K.plural.dog, mapOf("other" to "dogs","one" to "dog \"%s\"",),
      Qualifiers.Undefined
      ))))
}


public fun KostraResourceHider.plural(): Map<PluralResourceKey, ResourceContainer> = plural

