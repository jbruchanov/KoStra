plugins {
    id 'org.jetbrains.kotlin.jvm' version(libs.versions.kotlin)
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'org.jlleitschuh.gradle.ktlint' version(libs.versions.ktlintplugin)
}
def ktlint = "build-ktlint.gradle"
    .with { if (file(it).exists()) it else "../$it" }
apply from: ktlint

project.group = libs.versions.project.group.get()
project.version = libs.versions.project.version.get()

def kostraModelSrc = "kostra-model/src/commonMain/kotlin"
sourceSets {
    /*
        simple workaround for includedBuild
        for easier refactoring of model which GradlePlugin (GP) depends on just for code generation
        if it's taken as submodule GP compiles it and conflicts to root project as it compiles as well
        using maven dep + dependencySubstitution doesn't seem to work direction includeBuild -> project(:kostra-model)
        so adding these files into gradle plugin is not necessary as the plugin is unrelated to the library and there won't be class duplicates

        Also, copy seems to be necessary, otherwise the kostra-model itself doesn't take those files as source set
        At the end of the file, task deps added
     */
    main.kotlin.srcDirs += file("build/$kostraModelSrc")
}

task deleteModel() {
    outputs.upToDateWhen { false }
    group "kostra"
    doLast {
        file("build/kostra-model").deleteDir()
    }
}

task copyModel(type: Copy) {
    outputs.upToDateWhen { false }
    group "kostra"
    from "../$kostraModelSrc"
    into "build/$kostraModelSrc"
    dependsOn(deleteModel)
}

dependencies {
    implementation(libs.kotlin.poet)
    testImplementation(libs.bundles.unittest.jvm)
    testImplementation(libs.truth)
}

compileKotlin {
    kotlinOptions.jvmTarget = libs.versions.jvmtarget.get()
}

compileTestKotlin {
    kotlinOptions.jvmTarget = libs.versions.jvmtarget.get()
}

java {
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(libs.versions.jvmtarget.get()))
    }

}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.jibru'
            artifactId = 'kostra.gradle.plugin'
            from components.java
        }
    }
}

gradlePlugin {
    plugins {
        ktPlugin {
            id = "kostra"
            displayName = "KoStra"
            tags.set(["kotlin", "multiplatform", "i18n"])
            implementationClass = "com.jibru.kostra.plugin.KostraPlugin"
        }
    }
}

def tasks = ["compileKotlin", "sourcesJar", "runKtlintCheckOverMainSourceSet", "runKtlintFormatOverMainSourceSet"]
tasks.forEach {
    project.tasks.getByName(it) { dependsOn(copyModel) }
}
