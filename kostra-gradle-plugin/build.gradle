plugins {
    id("org.jetbrains.kotlin.jvm") version(libs.versions.kotlin)
    id("maven-publish")
    id("java-gradle-plugin")
}
apply from: "$rootProject.projectDir/build-ktlint.gradle"

project.group = libs.versions.project.group.get()
project.version = libs.versions.project.version.get()

dependencies {
    implementation(project(":lib-kostra-common"))

    implementation(libs.kotlin.poet)
    implementation(libs.kotlin.gradle.plugin)
    implementation(libs.kotlinx.coroutines.jdk)

    implementation(libs.icu)

    testImplementation(libs.bundles.unittest.jvm)
    testImplementation(libs.truth)
}

compileKotlin {
    kotlinOptions.jvmTarget = libs.versions.jvmtarget.get()
}

compileTestKotlin {
    kotlinOptions.jvmTarget = libs.versions.jvmtarget.get()
}

java {
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(libs.versions.jvmtarget.get()))
    }
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri(githubPackagesUrl)
            credentials {
                //defined in ~/.gradle/gradle.properties
                username = project.hasProperty("githubKostraUser") ? project.githubKostraUser : ""
                password = project.hasProperty("githubKostraPwdToken") ? project.githubKostraPwdToken : ""
            }
        }
    }
}

gradlePlugin {
    plugins {
        ktPlugin {
            id = "com.jibru.kostra.resources"
            displayName = "kostra"
            tags.set(["kotlin", "multiplatform", "i18n"])
            implementationClass = "com.jibru.kostra.plugin.KostraPlugin"
        }
    }
}

// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html#org.gradle.api.tasks.JavaExec
// or: task("execute", JavaExec::class) {
tasks.register("generateRuleSpecsForKostraCommonLib", JavaExec) {
    setDescription("Generate code from CLDR data files")
    setGroup("kostra")
    mainClass.set("com.jibru.kostra.plugin.PluralRulesGeneratorKt")
    classpath = sourceSets["main"].runtimeClasspath
    setArgs([
            project.rootProject.file("lib-kostra-common/src/commonMain/kotlin/com/jibru/kostra/icu").absolutePath
    ])
}
