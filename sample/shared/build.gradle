import com.jibru.kostra.plugin.ResourcesDefaults

plugins {
    id("org.jetbrains.kotlin.multiplatform")
    id("com.android.library")
    id("org.jetbrains.compose")
    id("org.jetbrains.kotlin.plugin.compose")
    id("org.jetbrains.kotlin.native.cocoapods")
    id("com.jibru.kostra.resources")
}

apply from: "$rootProject.projectDir/../build-ktlint.gradle"
apply from: "$rootProject.projectDir/../build-android-lib.gradle"

def depModules = [project(":shared-lib1"), project(":shared-lib2")]

kotlin {
    jvm()
    cocoapods {
        version = "1.0.0"
        summary = "Some description for the Shared Module"
        homepage = "Link to the Shared Module homepage"
        ios.deploymentTarget = "14.1"
        podfile = project.file("../appIos/Podfile")
        framework {
            baseName = "shared"
            binaryOption("bundleId", "com.jibru.kostra.sample.shared")
            binaryOption("bundleVersion", "2")
            isStatic = true
        }
    }

    iosX64()
    iosArm64()
    iosSimulatorArm64()

    sourceSets {
        commonMain {
            dependencies {
                implementation(libs.kostra.common)
                implementation(libs.kostra.compose)
                implementation(libs.bundles.jetbrains.compose.app)

                //api necessary for cocoapods export
                depModules.forEach {
                    api(it)
                }
            }
        }

        commonTest {
            dependencies {
                implementation(kotlin("test"))
            }
        }

        jvmMain {
            dependsOn(commonMain)
        }

        androidMain
        androidUnitTest

        iosX64Main
        iosArm64Main
        iosSimulatorArm64Main

        iosMain {
            dependsOn(commonMain)
            iosX64Main.dependsOn(delegate)
            iosArm64Main.dependsOn(delegate)
            iosSimulatorArm64Main.dependsOn(delegate)

            sourceSets {
                //add explicit reference to use module resources + kostra resources as part of this build
                //output in kostra/sample/build/ios/Debug-iphonesimulator/appIos.app/compose-resources/
                depModules.forEach { Project p ->
                    def srcResources = new File(p.projectDir, "src/commonMain/resources")
                    def genResources = new File(p.layout.getBuildDirectory().get().asFile, "generated/kostra/resources")
                    if (!srcResources.exists()) {
                        throw new IllegalStateException("IOS shared depends on ${p.name} resources, but ${srcResources.absolutePath} doesn't exist!")
                    }
                    if (!genResources.exists()) {
                        throw new IllegalStateException("IOS shared depends on ${p.name} resources, but ${genResources.absolutePath} doesn't exist!")
                    }
                    println("-".repeat(60))
                    println(srcResources)
                    println(genResources)
                    resources.srcDirs(srcResources)
                    resources.srcDirs(genResources)
                }
            }
        }

        iosX64Test
        iosArm64Test
        iosSimulatorArm64Test
        iosTest {
            dependsOn(commonTest)
            iosX64Test.dependsOn(delegate)
            iosArm64Test.dependsOn(delegate)
            iosSimulatorArm64Test.dependsOn(delegate)
        }
    }
}

kostra {
    KClassName = "com.sample.app.K"
    interfaces = true
    resourcesDefaults.value(ResourcesDefaults.values().toList())
    androidResources {
        painterGroups.add("flags.*")
        keyMapper { key, file -> key }
        //just to let plugin know about extra resources,
        //strings are transformed to own DB and don't need to be part of APK as xmls
        resourceDirs.add(file("src/commonMain/resources_strings"))
    }
}

android {
    namespace = "com.jibru.kostra.appsample"
}

//just ensure that lib DBs are created with 'shared' module DB
tasks.getByName("generateDatabases")
    .dependsOn(":shared-lib1:generateDatabases", ":shared-lib2:generateDatabases")
