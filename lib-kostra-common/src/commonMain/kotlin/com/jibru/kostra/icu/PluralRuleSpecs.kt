//
// AutoGeneratedFile
// UnicodeVersion:15.0.0
// CLDRVersion:43
//
@file:Suppress("ktlint")
package com.jibru.kostra.icu
import com.jibru.kostra.Locale

private val pluralSpecs_01: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
  )
)}

private val pluralSpecs_02: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 0.0,
          1.0)),
  )
)}

private val pluralSpecs_03: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.i, true, 0.0, 0.0),
        Constraint.Range(0, true, Operand.n, true, 1.0, 1.0))),
  )
)}

private val pluralSpecs_04: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Zero, constraint = Constraint.Range(0, true, Operand.n, true,
          0.0, 0.0)),
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
          2.0)),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(100, true, Operand.n, true,
          3.0, 10.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(100, true, Operand.n, true,
          11.0, 99.0)),
  )
)}

private val pluralSpecs_05: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.i, true, 1.0, 1.0),
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0))),
  )
)}

private val pluralSpecs_06: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 1.0, 1.0),
        Constraint.Range(100, false, Operand.n, true, 11.0, 11.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 2.0, 4.0),
        Constraint.Range(100, false, Operand.n, true, 12.0, 14.0))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.Range(10, true, Operand.n, true, 0.0, 0.0),
          Constraint.Range(10, true, Operand.n, true, 5.0, 9.0)),
        Constraint.Range(100, true, Operand.n, true, 11.0, 14.0))),
  )
)}

private val pluralSpecs_07: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
  )
)}

private val pluralSpecs_08: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 1.0, 1.0),
        Constraint.Range(100, false, Operand.n, true, 11.0, 91.0, longArrayOf(11, 11, 71, 71, 91,
              91)))),
    Rule(category = PluralCategory.Two, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 2.0, 2.0),
        Constraint.Range(100, false, Operand.n, true, 12.0, 92.0, longArrayOf(12, 12, 72, 72, 92,
              92)))),
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 3.0, 9.0, longArrayOf(3, 4, 9, 9)),
        Constraint.Range(100, false, Operand.n, true, 10.0, 99.0, longArrayOf(10, 19, 70, 79, 90,
              99)))),
    Rule(category = PluralCategory.Many, constraint = Constraint.And(
        Constraint.Range(0, false, Operand.n, true, 0.0, 0.0),
        Constraint.Range(1_000_000, true, Operand.n, true, 0.0, 0.0))),
  )
)}

private val pluralSpecs_09: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.And(
          Constraint.And(
            Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
            Constraint.Range(10, true, Operand.i, true, 1.0, 1.0)),
          Constraint.Range(100, false, Operand.i, true, 11.0, 11.0)),
        Constraint.And(
          Constraint.Range(10, true, Operand.f, true, 1.0, 1.0),
          Constraint.Range(100, false, Operand.f, true, 11.0, 11.0)))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Or(
        Constraint.And(
          Constraint.And(
            Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
            Constraint.Range(10, true, Operand.i, true, 2.0, 4.0)),
          Constraint.Range(100, false, Operand.i, true, 12.0, 14.0)),
        Constraint.And(
          Constraint.Range(10, true, Operand.f, true, 2.0, 4.0),
          Constraint.Range(100, false, Operand.f, true, 12.0, 14.0)))),
  )
)}

private val pluralSpecs_10: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.i, true, 1.0, 1.0),
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.And(
          Constraint.And(
            Constraint.And(
              Constraint.Range(0, true, Operand.e, true, 0.0, 0.0),
              Constraint.Range(0, false, Operand.i, true, 0.0, 0.0)),
            Constraint.Range(1_000_000, true, Operand.i, true, 0.0, 0.0)),
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0)),
        Constraint.Range(0, false, Operand.e, true, 0.0, 5.0))),
  )
)}

private val pluralSpecs_11: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.And(
            Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
            Constraint.Range(0, true, Operand.i, true, 1.0, 3.0, longArrayOf(1, 1, 2, 2, 3, 3))),
          Constraint.And(
            Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
            Constraint.Range(10, false, Operand.i, true, 4.0, 9.0, longArrayOf(4, 4, 6, 6, 9, 9)))),
        Constraint.And(
          Constraint.Range(0, false, Operand.v, true, 0.0, 0.0),
          Constraint.Range(10, false, Operand.f, true, 4.0, 9.0, longArrayOf(4, 4, 6, 6, 9, 9))))),
  )
)}

private val pluralSpecs_12: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.i, true, 1.0, 1.0),
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.i, true, 2.0, 4.0),
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, false, Operand.v, true,
          0.0, 0.0)),
  )
)}

private val pluralSpecs_13: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Zero, constraint = Constraint.Range(0, true, Operand.n, true,
          0.0, 0.0)),
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
          2.0)),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 3.0,
          3.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, true, Operand.n, true,
          6.0, 6.0)),
  )
)}

private val pluralSpecs_14: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.n, true, 1.0, 1.0),
        Constraint.And(
          Constraint.Range(0, false, Operand.t, true, 0.0, 0.0),
          Constraint.Range(0, true, Operand.i, true, 0.0, 1.0, longArrayOf(0, 0, 1, 1))))),
  )
)}

private val pluralSpecs_15: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(100, true, Operand.i, true, 1.0, 1.0)),
        Constraint.Range(100, true, Operand.f, true, 1.0, 1.0))),
    Rule(category = PluralCategory.Two, constraint = Constraint.Or(
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(100, true, Operand.i, true, 2.0, 2.0)),
        Constraint.Range(100, true, Operand.f, true, 2.0, 2.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Or(
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(100, true, Operand.i, true, 3.0, 4.0)),
        Constraint.Range(100, true, Operand.f, true, 3.0, 4.0))),
  )
)}

private val pluralSpecs_16: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.And(
          Constraint.And(
            Constraint.And(
              Constraint.Range(0, true, Operand.e, true, 0.0, 0.0),
              Constraint.Range(0, false, Operand.i, true, 0.0, 0.0)),
            Constraint.Range(1_000_000, true, Operand.i, true, 0.0, 0.0)),
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0)),
        Constraint.Range(0, false, Operand.e, true, 0.0, 5.0))),
  )
)}

private val pluralSpecs_17: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.i, true, 0.0,
            1.0, longArrayOf(0, 0, 1, 1))),
  )
)}

private val pluralSpecs_18: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.i, true, 0.0,
            1.0, longArrayOf(0, 0, 1, 1))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.And(
          Constraint.And(
            Constraint.And(
              Constraint.Range(0, true, Operand.e, true, 0.0, 0.0),
              Constraint.Range(0, false, Operand.i, true, 0.0, 0.0)),
            Constraint.Range(1_000_000, true, Operand.i, true, 0.0, 0.0)),
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0)),
        Constraint.Range(0, false, Operand.e, true, 0.0, 5.0))),
  )
)}

private val pluralSpecs_19: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
          2.0)),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 3.0,
          6.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, true, Operand.n, true,
          7.0, 10.0)),
  )
)}

private val pluralSpecs_20: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
            11.0, longArrayOf(1, 1, 11, 11))),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
            12.0, longArrayOf(2, 2, 12, 12))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 3.0,
            19.0, longArrayOf(3, 10, 13, 19))),
  )
)}

private val pluralSpecs_21: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
        Constraint.Range(10, true, Operand.i, true, 1.0, 1.0))),
    Rule(category = PluralCategory.Two, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
        Constraint.Range(10, true, Operand.i, true, 2.0, 2.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
        Constraint.Range(100, true, Operand.i, true, 0.0, 80.0, longArrayOf(0, 0, 20, 20, 40, 40,
              60, 60, 80, 80)))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, false, Operand.v, true,
          0.0, 0.0)),
  )
)}

private val pluralSpecs_22: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.And(
          Constraint.Range(0, true, Operand.i, true, 1.0, 1.0),
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0)),
        Constraint.And(
          Constraint.Range(0, true, Operand.i, true, 0.0, 0.0),
          Constraint.Range(0, false, Operand.v, true, 0.0, 0.0)))),
    Rule(category = PluralCategory.Two, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.i, true, 2.0, 2.0),
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0))),
  )
)}

private val pluralSpecs_23: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.And(
          Constraint.And(
            Constraint.Range(0, true, Operand.t, true, 0.0, 0.0),
            Constraint.Range(10, true, Operand.i, true, 1.0, 1.0)),
          Constraint.Range(100, false, Operand.i, true, 11.0, 11.0)),
        Constraint.And(
          Constraint.Range(10, true, Operand.t, true, 1.0, 1.0),
          Constraint.Range(100, false, Operand.t, true, 11.0, 11.0)))),
  )
)}

private val pluralSpecs_24: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
          2.0)),
  )
)}

private val pluralSpecs_25: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Zero, constraint = Constraint.Range(0, true, Operand.n, true,
          0.0, 0.0)),
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
  )
)}

private val pluralSpecs_26: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Zero, constraint = Constraint.Range(0, true, Operand.n, true,
          0.0, 0.0)),
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.Range(100, true, Operand.n, true, 2.0, 82.0, longArrayOf(2, 2, 22, 22, 42, 42,
                62, 62, 82, 82)),
          Constraint.And(
            Constraint.Range(1_000, true, Operand.n, true, 0.0, 0.0),
            Constraint.Range(100_000, true, Operand.n, true, 1_000.0, 80_000.0, longArrayOf(1000,
                  20000, 40000, 40000, 60000, 60000, 80000, 80000)))),
        Constraint.And(
          Constraint.Range(0, false, Operand.n, true, 0.0, 0.0),
          Constraint.Range(1_000_000, true, Operand.n, true, 100_000.0, 100_000.0)))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(100, true, Operand.n, true,
            3.0, 83.0, longArrayOf(3, 3, 23, 23, 43, 43, 63, 63, 83, 83))),
    Rule(category = PluralCategory.Many, constraint = Constraint.And(
        Constraint.Range(0, false, Operand.n, true, 1.0, 1.0),
        Constraint.Range(100, true, Operand.n, true, 1.0, 81.0, longArrayOf(1, 1, 21, 21, 41, 41,
              61, 61, 81, 81)))),
  )
)}

private val pluralSpecs_27: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Zero, constraint = Constraint.Range(0, true, Operand.n, true,
          0.0, 0.0)),
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.i, true, 0.0, 1.0, longArrayOf(0, 0, 1, 1)),
        Constraint.Range(0, false, Operand.n, true, 0.0, 0.0))),
  )
)}

private val pluralSpecs_28: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 1.0, 1.0),
        Constraint.Range(100, false, Operand.n, true, 11.0, 19.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 2.0, 9.0),
        Constraint.Range(100, false, Operand.n, true, 11.0, 19.0))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, false, Operand.f, true,
          0.0, 0.0)),
  )
)}

private val pluralSpecs_29: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Zero, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.Range(10, true, Operand.n, true, 0.0, 0.0),
          Constraint.Range(100, true, Operand.n, true, 11.0, 19.0)),
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 2.0, 2.0),
          Constraint.Range(100, true, Operand.f, true, 11.0, 19.0)))),
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.And(
            Constraint.Range(10, true, Operand.n, true, 1.0, 1.0),
            Constraint.Range(100, false, Operand.n, true, 11.0, 11.0)),
          Constraint.And(
            Constraint.And(
              Constraint.Range(0, true, Operand.v, true, 2.0, 2.0),
              Constraint.Range(10, true, Operand.f, true, 1.0, 1.0)),
            Constraint.Range(100, false, Operand.f, true, 11.0, 11.0))),
        Constraint.And(
          Constraint.Range(0, false, Operand.v, true, 2.0, 2.0),
          Constraint.Range(10, true, Operand.f, true, 1.0, 1.0)))),
  )
)}

private val pluralSpecs_30: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.And(
          Constraint.And(
            Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
            Constraint.Range(10, true, Operand.i, true, 1.0, 1.0)),
          Constraint.Range(100, false, Operand.i, true, 11.0, 11.0)),
        Constraint.And(
          Constraint.Range(10, true, Operand.f, true, 1.0, 1.0),
          Constraint.Range(100, false, Operand.f, true, 11.0, 11.0)))),
  )
)}

private val pluralSpecs_31: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.i, true, 1.0, 1.0),
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.Range(0, false, Operand.v, true, 0.0, 0.0),
          Constraint.Range(0, true, Operand.n, true, 0.0, 0.0)),
        Constraint.And(
          Constraint.Range(0, false, Operand.n, true, 1.0, 1.0),
          Constraint.Range(100, true, Operand.n, true, 1.0, 19.0)))),
  )
)}

private val pluralSpecs_32: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
          2.0)),
    Rule(category = PluralCategory.Few, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.n, true, 0.0, 0.0),
        Constraint.Range(100, true, Operand.n, true, 3.0, 10.0))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(100, true, Operand.n, true,
          11.0, 19.0)),
  )
)}

private val pluralSpecs_33: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.i, true, 1.0, 1.0),
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(10, true, Operand.i, true, 2.0, 4.0)),
        Constraint.Range(100, false, Operand.i, true, 12.0, 14.0))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.And(
            Constraint.And(
              Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
              Constraint.Range(0, false, Operand.i, true, 1.0, 1.0)),
            Constraint.Range(10, true, Operand.i, true, 0.0, 1.0)),
          Constraint.And(
            Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
            Constraint.Range(10, true, Operand.i, true, 5.0, 9.0))),
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(100, true, Operand.i, true, 12.0, 14.0)))),
  )
)}

private val pluralSpecs_34: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.i, true, 0.0,
          1.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.And(
          Constraint.And(
            Constraint.And(
              Constraint.Range(0, true, Operand.e, true, 0.0, 0.0),
              Constraint.Range(0, false, Operand.i, true, 0.0, 0.0)),
            Constraint.Range(1_000_000, true, Operand.i, true, 0.0, 0.0)),
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0)),
        Constraint.Range(0, false, Operand.e, true, 0.0, 5.0))),
  )
)}

private val pluralSpecs_35: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(10, true, Operand.i, true, 1.0, 1.0)),
        Constraint.Range(100, false, Operand.i, true, 11.0, 11.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(10, true, Operand.i, true, 2.0, 4.0)),
        Constraint.Range(100, false, Operand.i, true, 12.0, 14.0))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.And(
            Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
            Constraint.Range(10, true, Operand.i, true, 0.0, 0.0)),
          Constraint.And(
            Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
            Constraint.Range(10, true, Operand.i, true, 5.0, 9.0))),
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(100, true, Operand.i, true, 11.0, 14.0)))),
  )
)}

private val pluralSpecs_36: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.i, true, 0.0, 0.0),
        Constraint.Range(0, true, Operand.n, true, 1.0, 1.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
          10.0)),
  )
)}

private val pluralSpecs_37: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.n, true, 0.0, 1.0, longArrayOf(0, 0, 1, 1)),
        Constraint.And(
          Constraint.Range(0, true, Operand.i, true, 0.0, 0.0),
          Constraint.Range(0, true, Operand.f, true, 1.0, 1.0)))),
  )
)}

private val pluralSpecs_38: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
        Constraint.Range(100, true, Operand.i, true, 1.0, 1.0))),
    Rule(category = PluralCategory.Two, constraint = Constraint.And(
        Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
        Constraint.Range(100, true, Operand.i, true, 2.0, 2.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Or(
        Constraint.And(
          Constraint.Range(0, true, Operand.v, true, 0.0, 0.0),
          Constraint.Range(100, true, Operand.i, true, 3.0, 4.0)),
        Constraint.Range(0, false, Operand.v, true, 0.0, 0.0))),
  )
)}

private val pluralSpecs_39: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.n, true, 0.0, 1.0),
        Constraint.Range(0, true, Operand.n, true, 11.0, 99.0))),
  )
)}

val PluralRuleSpecs: Map<Locale, PluralRules> = buildMap(216) {
  put(Locale(1_06_00_00)/*af*/, pluralSpecs_01)
  put(Locale(1_11_00_00)/*ak*/, pluralSpecs_02)
  put(Locale(1_13_00_00)/*am*/, pluralSpecs_03)
  put(Locale(1_14_00_00)/*an*/, pluralSpecs_01)
  put(Locale(1_18_00_00)/*ar*/, pluralSpecs_04)
  put(Locale(1_18_19_00)/*ars*/, pluralSpecs_04)
  put(Locale(1_19_00_00)/*as*/, pluralSpecs_03)
  put(Locale(1_19_01_00)/*asa*/, pluralSpecs_01)
  put(Locale(1_19_20_00)/*ast*/, pluralSpecs_05)
  put(Locale(1_26_00_00)/*az*/, pluralSpecs_01)
  put(Locale(2_01_12_00)/*bal*/, pluralSpecs_01)
  put(Locale(2_05_00_00)/*be*/, pluralSpecs_06)
  put(Locale(2_05_13_00)/*bem*/, pluralSpecs_01)
  put(Locale(2_05_26_00)/*bez*/, pluralSpecs_01)
  put(Locale(2_07_00_00)/*bg*/, pluralSpecs_01)
  put(Locale(2_08_15_00)/*bho*/, pluralSpecs_02)
  put(Locale(2_13_00_00)/*bm*/, pluralSpecs_07)
  put(Locale(2_14_00_00)/*bn*/, pluralSpecs_03)
  put(Locale(2_15_00_00)/*bo*/, pluralSpecs_07)
  put(Locale(2_18_00_00)/*br*/, pluralSpecs_08)
  put(Locale(2_18_24_00)/*brx*/, pluralSpecs_01)
  put(Locale(2_19_00_00)/*bs*/, pluralSpecs_09)
  put(Locale(3_01_00_00)/*ca*/, pluralSpecs_10)
  put(Locale(3_05_00_00)/*ce*/, pluralSpecs_01)
  put(Locale(3_05_02_00)/*ceb*/, pluralSpecs_11)
  put(Locale(3_07_07_00)/*cgg*/, pluralSpecs_01)
  put(Locale(3_08_18_00)/*chr*/, pluralSpecs_01)
  put(Locale(3_11_02_00)/*ckb*/, pluralSpecs_01)
  put(Locale(3_19_00_00)/*cs*/, pluralSpecs_12)
  put(Locale(3_25_00_00)/*cy*/, pluralSpecs_13)
  put(Locale(4_01_00_00)/*da*/, pluralSpecs_14)
  put(Locale(4_05_00_00)/*de*/, pluralSpecs_05)
  put(Locale(4_15_09_00)/*doi*/, pluralSpecs_03)
  put(Locale(4_19_02_00)/*dsb*/, pluralSpecs_15)
  put(Locale(4_22_00_00)/*dv*/, pluralSpecs_01)
  put(Locale(4_26_00_00)/*dz*/, pluralSpecs_07)
  put(Locale(5_05_00_00)/*ee*/, pluralSpecs_01)
  put(Locale(5_12_00_00)/*el*/, pluralSpecs_01)
  put(Locale(5_14_00_00)/*en*/, pluralSpecs_05)
  put(Locale(5_15_00_00)/*eo*/, pluralSpecs_01)
  put(Locale(5_19_00_00)/*es*/, pluralSpecs_16)
  put(Locale(5_20_00_00)/*et*/, pluralSpecs_05)
  put(Locale(5_21_00_00)/*eu*/, pluralSpecs_01)
  put(Locale(6_01_00_00)/*fa*/, pluralSpecs_03)
  put(Locale(6_06_00_00)/*ff*/, pluralSpecs_17)
  put(Locale(6_09_00_00)/*fi*/, pluralSpecs_05)
  put(Locale(6_09_12_00)/*fil*/, pluralSpecs_11)
  put(Locale(6_15_00_00)/*fo*/, pluralSpecs_01)
  put(Locale(6_18_00_00)/*fr*/, pluralSpecs_18)
  put(Locale(6_21_18_00)/*fur*/, pluralSpecs_01)
  put(Locale(6_25_00_00)/*fy*/, pluralSpecs_05)
  put(Locale(7_01_00_00)/*ga*/, pluralSpecs_19)
  put(Locale(7_04_00_00)/*gd*/, pluralSpecs_20)
  put(Locale(7_12_00_00)/*gl*/, pluralSpecs_05)
  put(Locale(7_19_23_00)/*gsw*/, pluralSpecs_01)
  put(Locale(7_21_00_00)/*gu*/, pluralSpecs_03)
  put(Locale(7_21_23_00)/*guw*/, pluralSpecs_02)
  put(Locale(7_22_00_00)/*gv*/, pluralSpecs_21)
  put(Locale(8_01_00_00)/*ha*/, pluralSpecs_01)
  put(Locale(8_01_23_00)/*haw*/, pluralSpecs_01)
  put(Locale(8_05_00_00)/*he*/, pluralSpecs_22)
  put(Locale(8_09_00_00)/*hi*/, pluralSpecs_03)
  put(Locale(8_14_10_00)/*hnj*/, pluralSpecs_07)
  put(Locale(8_18_00_00)/*hr*/, pluralSpecs_09)
  put(Locale(8_19_02_00)/*hsb*/, pluralSpecs_15)
  put(Locale(8_21_00_00)/*hu*/, pluralSpecs_01)
  put(Locale(8_25_00_00)/*hy*/, pluralSpecs_17)
  put(Locale(9_01_00_00)/*ia*/, pluralSpecs_05)
  put(Locale(9_04_00_00)/*id*/, pluralSpecs_07)
  put(Locale(9_07_00_00)/*ig*/, pluralSpecs_07)
  put(Locale(9_09_00_00)/*ii*/, pluralSpecs_07)
  put(Locale(9_15_00_00)/*io*/, pluralSpecs_05)
  put(Locale(9_19_00_00)/*is*/, pluralSpecs_23)
  put(Locale(9_20_00_00)/*it*/, pluralSpecs_10)
  put(Locale(9_21_00_00)/*iu*/, pluralSpecs_24)
  put(Locale(10_01_00_00)/*ja*/, pluralSpecs_07)
  put(Locale(10_02_15_00)/*jbo*/, pluralSpecs_07)
  put(Locale(10_07_15_00)/*jgo*/, pluralSpecs_01)
  put(Locale(10_13_03_00)/*jmc*/, pluralSpecs_01)
  put(Locale(10_22_00_00)/*jv*/, pluralSpecs_07)
  put(Locale(10_23_00_00)/*jw*/, pluralSpecs_07)
  put(Locale(11_01_00_00)/*ka*/, pluralSpecs_01)
  put(Locale(11_01_02_00)/*kab*/, pluralSpecs_17)
  put(Locale(11_01_10_00)/*kaj*/, pluralSpecs_01)
  put(Locale(11_03_07_00)/*kcg*/, pluralSpecs_01)
  put(Locale(11_04_05_00)/*kde*/, pluralSpecs_07)
  put(Locale(11_05_01_00)/*kea*/, pluralSpecs_07)
  put(Locale(11_11_00_00)/*kk*/, pluralSpecs_01)
  put(Locale(11_11_10_00)/*kkj*/, pluralSpecs_01)
  put(Locale(11_12_00_00)/*kl*/, pluralSpecs_01)
  put(Locale(11_13_00_00)/*km*/, pluralSpecs_07)
  put(Locale(11_14_00_00)/*kn*/, pluralSpecs_03)
  put(Locale(11_15_00_00)/*ko*/, pluralSpecs_07)
  put(Locale(11_19_00_00)/*ks*/, pluralSpecs_01)
  put(Locale(11_19_02_00)/*ksb*/, pluralSpecs_01)
  put(Locale(11_19_08_00)/*ksh*/, pluralSpecs_25)
  put(Locale(11_21_00_00)/*ku*/, pluralSpecs_01)
  put(Locale(11_23_00_00)/*kw*/, pluralSpecs_26)
  put(Locale(11_25_00_00)/*ky*/, pluralSpecs_01)
  put(Locale(12_01_07_00)/*lag*/, pluralSpecs_27)
  put(Locale(12_02_00_00)/*lb*/, pluralSpecs_01)
  put(Locale(12_07_00_00)/*lg*/, pluralSpecs_01)
  put(Locale(12_09_10_00)/*lij*/, pluralSpecs_05)
  put(Locale(12_11_20_00)/*lkt*/, pluralSpecs_07)
  put(Locale(12_14_00_00)/*ln*/, pluralSpecs_02)
  put(Locale(12_15_00_00)/*lo*/, pluralSpecs_07)
  put(Locale(12_20_00_00)/*lt*/, pluralSpecs_28)
  put(Locale(12_22_00_00)/*lv*/, pluralSpecs_29)
  put(Locale(13_01_19_00)/*mas*/, pluralSpecs_01)
  put(Locale(13_07_00_00)/*mg*/, pluralSpecs_02)
  put(Locale(13_07_15_00)/*mgo*/, pluralSpecs_01)
  put(Locale(13_11_00_00)/*mk*/, pluralSpecs_30)
  put(Locale(13_12_00_00)/*ml*/, pluralSpecs_01)
  put(Locale(13_14_00_00)/*mn*/, pluralSpecs_01)
  put(Locale(13_15_00_00)/*mo*/, pluralSpecs_31)
  put(Locale(13_18_00_00)/*mr*/, pluralSpecs_01)
  put(Locale(13_19_00_00)/*ms*/, pluralSpecs_07)
  put(Locale(13_20_00_00)/*mt*/, pluralSpecs_32)
  put(Locale(13_25_00_00)/*my*/, pluralSpecs_07)
  put(Locale(14_01_08_00)/*nah*/, pluralSpecs_01)
  put(Locale(14_01_17_00)/*naq*/, pluralSpecs_24)
  put(Locale(14_02_00_00)/*nb*/, pluralSpecs_01)
  put(Locale(14_04_00_00)/*nd*/, pluralSpecs_01)
  put(Locale(14_05_00_00)/*ne*/, pluralSpecs_01)
  put(Locale(14_12_00_00)/*nl*/, pluralSpecs_05)
  put(Locale(14_14_00_00)/*nn*/, pluralSpecs_01)
  put(Locale(14_14_08_00)/*nnh*/, pluralSpecs_01)
  put(Locale(14_15_00_00)/*no*/, pluralSpecs_01)
  put(Locale(14_17_15_00)/*nqo*/, pluralSpecs_07)
  put(Locale(14_18_00_00)/*nr*/, pluralSpecs_01)
  put(Locale(14_19_15_00)/*nso*/, pluralSpecs_02)
  put(Locale(14_25_00_00)/*ny*/, pluralSpecs_01)
  put(Locale(14_25_14_00)/*nyn*/, pluralSpecs_01)
  put(Locale(15_13_00_00)/*om*/, pluralSpecs_01)
  put(Locale(15_18_00_00)/*or*/, pluralSpecs_01)
  put(Locale(15_19_00_00)/*os*/, pluralSpecs_01)
  put(Locale(15_19_01_00)/*osa*/, pluralSpecs_07)
  put(Locale(16_01_00_00)/*pa*/, pluralSpecs_02)
  put(Locale(16_01_16_00)/*pap*/, pluralSpecs_01)
  put(Locale(16_03_13_00)/*pcm*/, pluralSpecs_03)
  put(Locale(16_12_00_00)/*pl*/, pluralSpecs_33)
  put(Locale(16_18_07_00)/*prg*/, pluralSpecs_29)
  put(Locale(16_19_00_00)/*ps*/, pluralSpecs_01)
  put(Locale(16_20_00_00)/*pt*/, pluralSpecs_34)
  put(Locale(16_20_16_20)/*ptpt*/, pluralSpecs_10)
  put(Locale(18_13_00_00)/*rm*/, pluralSpecs_01)
  put(Locale(18_15_00_00)/*ro*/, pluralSpecs_31)
  put(Locale(18_15_06_00)/*rof*/, pluralSpecs_01)
  put(Locale(18_21_00_00)/*ru*/, pluralSpecs_35)
  put(Locale(18_23_11_00)/*rwk*/, pluralSpecs_01)
  put(Locale(19_01_08_00)/*sah*/, pluralSpecs_07)
  put(Locale(19_01_17_00)/*saq*/, pluralSpecs_01)
  put(Locale(19_01_20_00)/*sat*/, pluralSpecs_24)
  put(Locale(19_03_00_00)/*sc*/, pluralSpecs_05)
  put(Locale(19_03_14_00)/*scn*/, pluralSpecs_05)
  put(Locale(19_04_00_00)/*sd*/, pluralSpecs_01)
  put(Locale(19_04_08_00)/*sdh*/, pluralSpecs_01)
  put(Locale(19_05_00_00)/*se*/, pluralSpecs_24)
  put(Locale(19_05_08_00)/*seh*/, pluralSpecs_01)
  put(Locale(19_05_19_00)/*ses*/, pluralSpecs_07)
  put(Locale(19_07_00_00)/*sg*/, pluralSpecs_07)
  put(Locale(19_08_00_00)/*sh*/, pluralSpecs_09)
  put(Locale(19_08_09_00)/*shi*/, pluralSpecs_36)
  put(Locale(19_09_00_00)/*si*/, pluralSpecs_37)
  put(Locale(19_11_00_00)/*sk*/, pluralSpecs_12)
  put(Locale(19_12_00_00)/*sl*/, pluralSpecs_38)
  put(Locale(19_13_01_00)/*sma*/, pluralSpecs_24)
  put(Locale(19_13_09_00)/*smi*/, pluralSpecs_24)
  put(Locale(19_13_10_00)/*smj*/, pluralSpecs_24)
  put(Locale(19_13_14_00)/*smn*/, pluralSpecs_24)
  put(Locale(19_13_19_00)/*sms*/, pluralSpecs_24)
  put(Locale(19_14_00_00)/*sn*/, pluralSpecs_01)
  put(Locale(19_15_00_00)/*so*/, pluralSpecs_01)
  put(Locale(19_17_00_00)/*sq*/, pluralSpecs_01)
  put(Locale(19_18_00_00)/*sr*/, pluralSpecs_09)
  put(Locale(19_19_00_00)/*ss*/, pluralSpecs_01)
  put(Locale(19_19_25_00)/*ssy*/, pluralSpecs_01)
  put(Locale(19_20_00_00)/*st*/, pluralSpecs_01)
  put(Locale(19_21_00_00)/*su*/, pluralSpecs_07)
  put(Locale(19_22_00_00)/*sv*/, pluralSpecs_05)
  put(Locale(19_23_00_00)/*sw*/, pluralSpecs_05)
  put(Locale(19_25_18_00)/*syr*/, pluralSpecs_01)
  put(Locale(20_01_00_00)/*ta*/, pluralSpecs_01)
  put(Locale(20_05_00_00)/*te*/, pluralSpecs_01)
  put(Locale(20_05_15_00)/*teo*/, pluralSpecs_01)
  put(Locale(20_08_00_00)/*th*/, pluralSpecs_07)
  put(Locale(20_09_00_00)/*ti*/, pluralSpecs_02)
  put(Locale(20_09_07_00)/*tig*/, pluralSpecs_01)
  put(Locale(20_11_00_00)/*tk*/, pluralSpecs_01)
  put(Locale(20_12_00_00)/*tl*/, pluralSpecs_11)
  put(Locale(20_14_00_00)/*tn*/, pluralSpecs_01)
  put(Locale(20_15_00_00)/*to*/, pluralSpecs_07)
  put(Locale(20_16_09_00)/*tpi*/, pluralSpecs_07)
  put(Locale(20_18_00_00)/*tr*/, pluralSpecs_01)
  put(Locale(20_19_00_00)/*ts*/, pluralSpecs_01)
  put(Locale(20_26_13_00)/*tzm*/, pluralSpecs_39)
  put(Locale(21_07_00_00)/*ug*/, pluralSpecs_01)
  put(Locale(21_11_00_00)/*uk*/, pluralSpecs_35)
  put(Locale(21_14_04_00)/*und*/, pluralSpecs_07)
  put(Locale(21_18_00_00)/*ur*/, pluralSpecs_05)
  put(Locale(21_26_00_00)/*uz*/, pluralSpecs_01)
  put(Locale(22_05_00_00)/*ve*/, pluralSpecs_01)
  put(Locale(22_05_03_00)/*vec*/, pluralSpecs_10)
  put(Locale(22_09_00_00)/*vi*/, pluralSpecs_07)
  put(Locale(22_15_00_00)/*vo*/, pluralSpecs_01)
  put(Locale(22_21_14_00)/*vun*/, pluralSpecs_01)
  put(Locale(23_01_00_00)/*wa*/, pluralSpecs_02)
  put(Locale(23_01_05_00)/*wae*/, pluralSpecs_01)
  put(Locale(23_15_00_00)/*wo*/, pluralSpecs_07)
  put(Locale(24_08_00_00)/*xh*/, pluralSpecs_01)
  put(Locale(24_15_07_00)/*xog*/, pluralSpecs_01)
  put(Locale(25_09_00_00)/*yi*/, pluralSpecs_05)
  put(Locale(25_15_00_00)/*yo*/, pluralSpecs_07)
  put(Locale(25_21_05_00)/*yue*/, pluralSpecs_07)
  put(Locale(26_08_00_00)/*zh*/, pluralSpecs_07)
  put(Locale(26_21_00_00)/*zu*/, pluralSpecs_03)
}
