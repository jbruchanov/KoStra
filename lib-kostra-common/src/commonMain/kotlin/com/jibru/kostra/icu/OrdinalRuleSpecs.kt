//
// AutoGeneratedFile
// UnicodeVersion:15.0.0
// CLDRVersion:43
//
@file:Suppress("ktlint")
package com.jibru.kostra.icu
import com.jibru.kostra.Locale

private val ordinalSpecs_01: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
  )
)}

private val ordinalSpecs_02: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
            10.0, longArrayOf(1, 1, 5, 5, 7, 7, 8, 8, 9, 9, 10, 10))),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
            3.0, longArrayOf(2, 2, 3, 3))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 4.0,
          4.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, true, Operand.n, true,
          6.0, 6.0)),
  )
)}

private val ordinalSpecs_03: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Range(10, true, Operand.i, true, 1.0, 8.0, longArrayOf(1, 1, 2, 2, 5, 5, 7, 7, 8,
              8)),
        Constraint.Range(100, true, Operand.i, true, 20.0, 80.0, longArrayOf(20, 20, 50, 50, 70, 70,
              80, 80)))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Or(
        Constraint.Range(10, true, Operand.i, true, 3.0, 4.0, longArrayOf(3, 3, 4, 4)),
        Constraint.Range(1_000, true, Operand.i, true, 100.0, 900.0, longArrayOf(100, 100, 200, 200,
              300, 300, 400, 400, 500, 500, 600, 600, 700, 700, 800, 800, 900, 900)))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.Range(0, true, Operand.i, true, 0.0, 0.0),
          Constraint.Range(10, true, Operand.i, true, 6.0, 6.0)),
        Constraint.Range(100, true, Operand.i, true, 40.0, 90.0, longArrayOf(40, 40, 60, 60, 90,
              90)))),
  )
)}

private val ordinalSpecs_04: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
  )
)}

private val ordinalSpecs_05: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 2.0, 3.0, longArrayOf(2, 2, 3, 3)),
        Constraint.Range(100, false, Operand.n, true, 12.0, 13.0, longArrayOf(12, 12, 13, 13)))),
  )
)}

private val ordinalSpecs_06: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
            3.0, longArrayOf(1, 1, 3, 3))),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
          2.0)),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 4.0,
          4.0)),
  )
)}

private val ordinalSpecs_07: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Zero, constraint = Constraint.Range(0, true, Operand.n, true,
            0.0, 9.0, longArrayOf(0, 0, 7, 7, 8, 8, 9, 9))),
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
          2.0)),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 3.0,
            4.0, longArrayOf(3, 3, 4, 4))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, true, Operand.n, true,
            5.0, 6.0, longArrayOf(5, 5, 6, 6))),
  )
)}

private val ordinalSpecs_08: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 1.0, 1.0),
        Constraint.Range(100, false, Operand.n, true, 11.0, 11.0))),
    Rule(category = PluralCategory.Two, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 2.0, 2.0),
        Constraint.Range(100, false, Operand.n, true, 12.0, 12.0))),
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 3.0, 3.0),
        Constraint.Range(100, false, Operand.n, true, 13.0, 13.0))),
  )
)}

private val ordinalSpecs_09: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
            11.0, longArrayOf(1, 1, 11, 11))),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
            12.0, longArrayOf(2, 2, 12, 12))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 3.0,
            13.0, longArrayOf(3, 3, 13, 13))),
  )
)}

private val ordinalSpecs_10: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
            3.0, longArrayOf(2, 2, 3, 3))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 4.0,
          4.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, true, Operand.n, true,
          6.0, 6.0)),
  )
)}

private val ordinalSpecs_11: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
            5.0, longArrayOf(1, 1, 5, 5))),
  )
)}

private val ordinalSpecs_12: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, true, Operand.n, true,
            8.0, 800.0, longArrayOf(11, 11, 8, 8, 80, 80, 800, 800))),
  )
)}

private val ordinalSpecs_13: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.i, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.i, true, 0.0, 0.0),
        Constraint.Range(100, true, Operand.i, true, 2.0, 80.0, longArrayOf(2, 20, 40, 40, 60, 60,
              80, 80)))),
  )
)}

private val ordinalSpecs_14: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.Or(
          Constraint.Range(10, true, Operand.n, true, 6.0, 6.0),
          Constraint.Range(10, true, Operand.n, true, 9.0, 9.0)),
        Constraint.And(
          Constraint.Range(10, true, Operand.n, true, 0.0, 0.0),
          Constraint.Range(0, false, Operand.n, true, 0.0, 0.0)))),
  )
)}

private val ordinalSpecs_15: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.n, true, 1.0, 4.0),
        Constraint.Range(100, true, Operand.n, true, 1.0, 84.0, longArrayOf(1, 4, 21, 24, 41, 44,
              61, 64, 81, 84)))),
    Rule(category = PluralCategory.Many, constraint = Constraint.Or(
        Constraint.Range(0, true, Operand.n, true, 5.0, 5.0),
        Constraint.Range(100, true, Operand.n, true, 5.0, 5.0))),
  )
)}

private val ordinalSpecs_16: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, true, Operand.n, true,
            8.0, 899.0, longArrayOf(11, 11, 8, 8, 80, 89, 800, 899))),
  )
)}

private val ordinalSpecs_17: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.i, true, 1.0, 1.0),
        Constraint.Range(100, false, Operand.i, true, 11.0, 11.0))),
    Rule(category = PluralCategory.Two, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.i, true, 2.0, 2.0),
        Constraint.Range(100, false, Operand.i, true, 12.0, 12.0))),
    Rule(category = PluralCategory.Many, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.i, true, 7.0, 8.0, longArrayOf(7, 7, 8, 8)),
        Constraint.Range(100, false, Operand.i, true, 17.0, 18.0, longArrayOf(17, 17, 18, 18)))),
  )
)}

private val ordinalSpecs_18: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
            3.0, longArrayOf(2, 2, 3, 3))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 4.0,
          4.0)),
  )
)}

private val ordinalSpecs_19: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          4.0)),
  )
)}

private val ordinalSpecs_20: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
            9.0, longArrayOf(1, 1, 5, 5, 7, 9))),
    Rule(category = PluralCategory.Two, constraint = Constraint.Range(0, true, Operand.n, true, 2.0,
            3.0, longArrayOf(2, 2, 3, 3))),
    Rule(category = PluralCategory.Few, constraint = Constraint.Range(0, true, Operand.n, true, 4.0,
          4.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.Range(0, true, Operand.n, true,
          6.0, 6.0)),
  )
)}

private val ordinalSpecs_21: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.Range(0, true, Operand.n, true, 1.0,
          1.0)),
    Rule(category = PluralCategory.Many, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 4.0, 4.0),
        Constraint.Range(100, false, Operand.n, true, 14.0, 14.0))),
  )
)}

private val ordinalSpecs_22: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.One, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 1.0, 2.0, longArrayOf(1, 1, 2, 2)),
        Constraint.Range(100, false, Operand.n, true, 11.0, 12.0, longArrayOf(11, 11, 12, 12)))),
  )
)}

private val ordinalSpecs_23: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Few, constraint = Constraint.Or(
        Constraint.Range(10, true, Operand.n, true, 6.0, 9.0, longArrayOf(6, 6, 9, 9)),
        Constraint.Range(0, true, Operand.n, true, 10.0, 10.0))),
  )
)}

private val ordinalSpecs_24: PluralRules by lazy(LazyThreadSafetyMode.NONE) { PluralRules(
  rules = listOf(
    Rule(category = PluralCategory.Few, constraint = Constraint.And(
        Constraint.Range(10, true, Operand.n, true, 3.0, 3.0),
        Constraint.Range(100, false, Operand.n, true, 13.0, 13.0))),
  )
)}

val OrdinalRuleSpecs: Map<Locale, PluralRules> = buildMap(102) {
  put(Locale(1_06_00_00)/*af*/, ordinalSpecs_01)
  put(Locale(1_13_00_00)/*am*/, ordinalSpecs_01)
  put(Locale(1_14_00_00)/*an*/, ordinalSpecs_01)
  put(Locale(1_18_00_00)/*ar*/, ordinalSpecs_01)
  put(Locale(1_19_00_00)/*as*/, ordinalSpecs_02)
  put(Locale(1_19_20_00)/*ast*/, ordinalSpecs_01)
  put(Locale(1_26_00_00)/*az*/, ordinalSpecs_03)
  put(Locale(2_01_12_00)/*bal*/, ordinalSpecs_04)
  put(Locale(2_05_00_00)/*be*/, ordinalSpecs_05)
  put(Locale(2_07_00_00)/*bg*/, ordinalSpecs_01)
  put(Locale(2_14_00_00)/*bn*/, ordinalSpecs_02)
  put(Locale(2_19_00_00)/*bs*/, ordinalSpecs_01)
  put(Locale(3_01_00_00)/*ca*/, ordinalSpecs_06)
  put(Locale(3_05_00_00)/*ce*/, ordinalSpecs_01)
  put(Locale(3_19_00_00)/*cs*/, ordinalSpecs_01)
  put(Locale(3_25_00_00)/*cy*/, ordinalSpecs_07)
  put(Locale(4_01_00_00)/*da*/, ordinalSpecs_01)
  put(Locale(4_05_00_00)/*de*/, ordinalSpecs_01)
  put(Locale(4_19_02_00)/*dsb*/, ordinalSpecs_01)
  put(Locale(5_12_00_00)/*el*/, ordinalSpecs_01)
  put(Locale(5_14_00_00)/*en*/, ordinalSpecs_08)
  put(Locale(5_19_00_00)/*es*/, ordinalSpecs_01)
  put(Locale(5_20_00_00)/*et*/, ordinalSpecs_01)
  put(Locale(5_21_00_00)/*eu*/, ordinalSpecs_01)
  put(Locale(6_01_00_00)/*fa*/, ordinalSpecs_01)
  put(Locale(6_09_00_00)/*fi*/, ordinalSpecs_01)
  put(Locale(6_09_12_00)/*fil*/, ordinalSpecs_04)
  put(Locale(6_18_00_00)/*fr*/, ordinalSpecs_04)
  put(Locale(6_25_00_00)/*fy*/, ordinalSpecs_01)
  put(Locale(7_01_00_00)/*ga*/, ordinalSpecs_04)
  put(Locale(7_04_00_00)/*gd*/, ordinalSpecs_09)
  put(Locale(7_12_00_00)/*gl*/, ordinalSpecs_01)
  put(Locale(7_19_23_00)/*gsw*/, ordinalSpecs_01)
  put(Locale(7_21_00_00)/*gu*/, ordinalSpecs_10)
  put(Locale(8_05_00_00)/*he*/, ordinalSpecs_01)
  put(Locale(8_09_00_00)/*hi*/, ordinalSpecs_10)
  put(Locale(8_18_00_00)/*hr*/, ordinalSpecs_01)
  put(Locale(8_19_02_00)/*hsb*/, ordinalSpecs_01)
  put(Locale(8_21_00_00)/*hu*/, ordinalSpecs_11)
  put(Locale(8_25_00_00)/*hy*/, ordinalSpecs_04)
  put(Locale(9_01_00_00)/*ia*/, ordinalSpecs_01)
  put(Locale(9_04_00_00)/*id*/, ordinalSpecs_01)
  put(Locale(9_19_00_00)/*is*/, ordinalSpecs_01)
  put(Locale(9_20_00_00)/*it*/, ordinalSpecs_12)
  put(Locale(10_01_00_00)/*ja*/, ordinalSpecs_01)
  put(Locale(11_01_00_00)/*ka*/, ordinalSpecs_13)
  put(Locale(11_11_00_00)/*kk*/, ordinalSpecs_14)
  put(Locale(11_13_00_00)/*km*/, ordinalSpecs_01)
  put(Locale(11_14_00_00)/*kn*/, ordinalSpecs_01)
  put(Locale(11_15_00_00)/*ko*/, ordinalSpecs_01)
  put(Locale(11_23_00_00)/*kw*/, ordinalSpecs_15)
  put(Locale(11_25_00_00)/*ky*/, ordinalSpecs_01)
  put(Locale(12_09_10_00)/*lij*/, ordinalSpecs_16)
  put(Locale(12_15_00_00)/*lo*/, ordinalSpecs_04)
  put(Locale(12_20_00_00)/*lt*/, ordinalSpecs_01)
  put(Locale(12_22_00_00)/*lv*/, ordinalSpecs_01)
  put(Locale(13_11_00_00)/*mk*/, ordinalSpecs_17)
  put(Locale(13_12_00_00)/*ml*/, ordinalSpecs_01)
  put(Locale(13_14_00_00)/*mn*/, ordinalSpecs_01)
  put(Locale(13_15_00_00)/*mo*/, ordinalSpecs_04)
  put(Locale(13_18_00_00)/*mr*/, ordinalSpecs_18)
  put(Locale(13_19_00_00)/*ms*/, ordinalSpecs_04)
  put(Locale(13_25_00_00)/*my*/, ordinalSpecs_01)
  put(Locale(14_02_00_00)/*nb*/, ordinalSpecs_01)
  put(Locale(14_05_00_00)/*ne*/, ordinalSpecs_19)
  put(Locale(14_12_00_00)/*nl*/, ordinalSpecs_01)
  put(Locale(14_15_00_00)/*no*/, ordinalSpecs_01)
  put(Locale(15_18_00_00)/*or*/, ordinalSpecs_20)
  put(Locale(16_01_00_00)/*pa*/, ordinalSpecs_01)
  put(Locale(16_12_00_00)/*pl*/, ordinalSpecs_01)
  put(Locale(16_18_07_00)/*prg*/, ordinalSpecs_01)
  put(Locale(16_19_00_00)/*ps*/, ordinalSpecs_01)
  put(Locale(16_20_00_00)/*pt*/, ordinalSpecs_01)
  put(Locale(18_15_00_00)/*ro*/, ordinalSpecs_04)
  put(Locale(18_21_00_00)/*ru*/, ordinalSpecs_01)
  put(Locale(19_03_00_00)/*sc*/, ordinalSpecs_12)
  put(Locale(19_03_14_00)/*scn*/, ordinalSpecs_12)
  put(Locale(19_04_00_00)/*sd*/, ordinalSpecs_01)
  put(Locale(19_08_00_00)/*sh*/, ordinalSpecs_01)
  put(Locale(19_09_00_00)/*si*/, ordinalSpecs_01)
  put(Locale(19_11_00_00)/*sk*/, ordinalSpecs_01)
  put(Locale(19_12_00_00)/*sl*/, ordinalSpecs_01)
  put(Locale(19_17_00_00)/*sq*/, ordinalSpecs_21)
  put(Locale(19_18_00_00)/*sr*/, ordinalSpecs_01)
  put(Locale(19_22_00_00)/*sv*/, ordinalSpecs_22)
  put(Locale(19_23_00_00)/*sw*/, ordinalSpecs_01)
  put(Locale(20_01_00_00)/*ta*/, ordinalSpecs_01)
  put(Locale(20_05_00_00)/*te*/, ordinalSpecs_01)
  put(Locale(20_08_00_00)/*th*/, ordinalSpecs_01)
  put(Locale(20_11_00_00)/*tk*/, ordinalSpecs_23)
  put(Locale(20_12_00_00)/*tl*/, ordinalSpecs_04)
  put(Locale(20_16_09_00)/*tpi*/, ordinalSpecs_01)
  put(Locale(20_18_00_00)/*tr*/, ordinalSpecs_01)
  put(Locale(21_11_00_00)/*uk*/, ordinalSpecs_24)
  put(Locale(21_14_04_00)/*und*/, ordinalSpecs_01)
  put(Locale(21_18_00_00)/*ur*/, ordinalSpecs_01)
  put(Locale(21_26_00_00)/*uz*/, ordinalSpecs_01)
  put(Locale(22_05_03_00)/*vec*/, ordinalSpecs_12)
  put(Locale(22_09_00_00)/*vi*/, ordinalSpecs_04)
  put(Locale(25_21_05_00)/*yue*/, ordinalSpecs_01)
  put(Locale(26_08_00_00)/*zh*/, ordinalSpecs_01)
  put(Locale(26_21_00_00)/*zu*/, ordinalSpecs_01)
}
